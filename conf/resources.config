process {

  cpus = params.cpus
  memory = params.memory
  time = params.time

  max_memory = params.max_memory
  max_cpus = params.max_cpus
  max_time = params.max_time

  maxRetries = params.maxRetries
  maxForks = params.maxForks
  maxErrors = params.maxErrors
  queueSize = params.queueSize
  errorStrategy = params.errorStrategy

  withLabel: process_small {
    cpus = { check_max( params.cpus * task.attempt, "cpus" ) }
    memory = { check_max( (params.memory as nextflow.util.MemoryUnit) * task.attempt, "memory" ) }
    time = { check_max( params.time * task.attempt, "time" ) }
  }
  withLabel: process_medium {
    cpus = { check_max( params.cpus * 2 * task.attempt, "cpus" ) }
    memory = { check_max( (params.memory as nextflow.util.MemoryUnit) * 2 * task.attempt, "memory" ) }
    time = { check_max( params.time * 2 * task.attempt, "time" ) }
  }
  withLabel: process_large {
    cpus = { check_max( params.cpus * 4 * task.attempt, "cpus" ) }
    memory = { check_max( (params.large_memory as nextflow.util.MemoryUnit) * 4 * task.attempt, "memory" ) }
    time = { check_max( params.time * 4 * task.attempt, "time" ) }
  }
}

// Function to ensure that resource requirements don"t go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == "memory") {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == "time") {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == "cpus") {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
